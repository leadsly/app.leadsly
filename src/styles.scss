@import 'styles-variables';

@import 'styles-font-face';

@import 'styles-reset';

@import '~@angular/material/theming';

@include mat-core();

@import './themes/default-theme';
@import './themes/light-theme';
@import './themes/black-theme';
@import './themes/nature-theme';

@import 'styles-reset.scss-theme';
@import './app/app/app.component.scss-theme';
@import './app/shared/components/odm-ghost-block/odm-ghost.scss-theme';
@import './app/shared/components/password-help/password-help.component.scss-theme.scss';
@import './app/views/about/about/about.component.scss-theme';
@import './app/views/examples/examples/examples.component.scss-theme';
@import './app/views/auth/auth-container/auth-container.component.scss-theme.scss';
@import './app/views/account/general-container/email-settings/email-settings.scss-theme.scss';
@import './app/views/account/general-container/change-email/change-email.component.scss-theme.scss';
@import './app/views/account/security-container/security-container.scss-theme.scss';
@import './app/views/account/security-container/password-settings/password-settings.scss-theme.scss';
@import './app/views/account/security-container/change-password/change-password.component.scss-theme.scss';
@import './app/views/account/security-container/two-factor-authentication/two-factor-authentication.scss-theme.scss';
@import './app/views/account/general-container/personal-email-verification/personal-email-verification.scss-theme.scss';
@import './app/views/account/general-container/general-container.scss-theme.scss';

@mixin custom-components-theme($theme) {
	@include odm-styles-reset-theme($theme);
	@include odm-app-component-theme($theme);
	@include odm-about-component-theme($theme);
	@include odm-examples-component-theme($theme);
	@include odm-ghost-theme;
	@include odm-auth-container-component-theme($theme);
	@include odm-password-help-component-theme($theme);
	@include odm-password-settings-component-theme($theme);
	@include odm-change-password-component-theme($theme);
	@include odm-change-email-component-theme($theme);
	@include odm-two-factor-authentication-component-theme($theme);
	@include odm-personal-email-verification-component-theme($theme);
	@include odm-general-container-component-theme($theme);
	@include odm-email-settings-component-theme($theme);
	@include odm-security-container-component-theme($theme);
}

.default-theme {
	@include angular-material-theme($odm-theme);
	@include custom-components-theme($odm-theme);
}

.light-theme {
	@include angular-material-theme($odm-light-theme);
	@include custom-components-theme($odm-light-theme);
}

.black-theme {
	@include angular-material-theme($odm-black-theme);
	@include custom-components-theme($odm-black-theme);
}

.nature-theme {
	@include angular-material-theme($odm-nature-theme);
	@include custom-components-theme($odm-nature-theme);
}

// GLOBAL STYLES

*,
*::before,
*::after {
	box-sizing: border-box;
}

body {
	margin: 0;
	line-height: 1.5rem;
	font-family: 'Roboto', sans-serif;
}

p {
	font-size: 14px;
	font-weight: 500;
	line-height: 20px;
	letter-spacing: 0.5px;
	margin: 20px 0 30px;
}

.display-inline {
	display: inline !important;
}

.display-none {
	display: none !important;
}

.display-flex {
	display: flex !important;
}

.column-12 {
	flex: 0 0 100%;
	max-width: 100%;
}

.column-sm-12 {
	position: relative;
	width: 100%;
	padding-right: 15px;
	padding-left: 15px;
}

.column-md-6 {
	position: relative;
	width: 100%;
	padding-right: 15px;
	padding-left: 15px;
}

.column-md-12 {
	position: relative;
	width: 100%;
	padding-right: 15px;
	padding-left: 15px;
}

.column-lg-4 {
	position: relative;
	width: 100%;
	padding-right: 15px;
	padding-left: 15px;
}

._row {
	padding: 10px 0;
	display: flex;
	flex-wrap: wrap;
	margin-right: -15px;
	margin-left: -15px;
}

._container {
	width: 100%;
	padding-right: 15px;
	padding-left: 15px;
	margin-right: auto;
	margin-left: auto;
}

._align-items-end {
	align-items: flex-end !important;
}

._justify-content-center {
	justify-content: center !important;
}

img {
	vertical-align: middle;
	border-style: none;
}

@keyframes blink {
	/**
     * At the start of the animation the dot
     * has an opacity of .2
     */
	0% {
		opacity: 0.2;
	}
	/**
     * At 20% the dot is fully visible and
     * then fades out slowly
     */
	20% {
		opacity: 1;
	}
	/**
     * Until it reaches an opacity of .2 and
     * the animation can start again
     */
	100% {
		opacity: 0.2;
	}
}

.loading-dots-animation span {
	/**
     * Use the blink animation, which is defined above
     */
	animation-name: blink;
	/**
     * The animation should take 1.4 seconds
     */
	animation-duration: 1.4s;
	/**
     * It will repeat itself forever
     */
	animation-iteration-count: infinite;
	/**
     * This makes sure that the starting style (opacity: .2)
     * of the animation is applied before the animation starts.
     * Otherwise we would see a short flash or would have
     * to set the default styling of the dots to the same
     * as the animation. Same applies for the ending styles.
     */
	animation-fill-mode: both;
}

.saving span:nth-child(2) {
	/**
     * Starts the animation of the third dot
     * with a delay of .2s, otherwise all dots
     * would animate at the same time
     */
	animation-delay: 0.2s;
}

.saving span:nth-child(3) {
	/**
     * Starts the animation of the third dot
     * with a delay of .4s, otherwise all dots
     * would animate at the same time
     */
	animation-delay: 0.4s;
}

@media (min-width: map-get($grid-breakpoints, sm)) {
	.display-sm-none {
		display: none !important;
	}

	.display-sm-inline {
		display: inline !important;
	}

	.column-sm-12 {
		flex: 0 0 100%;
		max-width: 100%;
	}

	._container {
		max-width: 540px;
	}

	.column-sm-12 {
		flex: 0 0 100%;
		max-width: 100%;
	}

	.display-sm-flex {
		display: flex !important;
	}
}

@media (min-width: map-get($grid-breakpoints, md)) {
	.display-md-none {
		display: none !important;
	}

	.display-md-inline {
		display: inline !important;
	}

	._container {
		max-width: 720px;
	}

	.column-md-6 {
		flex: 0 0 100%;
		max-width: 50%;
	}

	.column-md-12 {
		flex: 0 0 100%;
		max-width: 100%;
	}

	.column-lg-4 {
		flex: 0 0 50%;
		max-width: 50%;
	}
}

@media (min-width: map-get($grid-breakpoints, lg)) {
	._container {
		max-width: 960px;
	}

	.column-lg-4 {
		flex: 0 0 33.3333333333%;
		max-width: 33.3333333333%;
	}
}
